import numpy as np
import matplotlib.pyplot as plt

#------------------------------------------------------------------------------
# AND Gate
#------------------------------------------------------------------------------
def _and_(x1, x2):

  w1 = 0.5
  w2 = 0.5
  b = -0.75

  u = (w1 * x1) + (w2 * x2) + b

  if u > 0:
    return 1
  else:
    return 0

print(f'AND(0, 0) : {_and_(0, 0)}')
print(f'AND(0, 1) : {_and_(0, 1)}')
print(f'AND(1, 0) : {_and_(1, 0)}')
print(f'AND(1, 1) : {_and_(1, 1)}')

#------------------------------------------------------------------------------
# OR Gate
#------------------------------------------------------------------------------
def _or_(x1, x2):

  w1 = 0.5
  w2 = 0.5
  b = -0.25

  u = (w1 * x1) + (w2 * x2) + b

  if u > 0:
    return 1
  else:
    return 0

print(f'AND(0, 0) : {_and_(0, 0)}')
print(f'AND(0, 1) : {_and_(0, 1)}')
print(f'AND(1, 0) : {_and_(1, 0)}')
print(f'AND(1, 1) : {_and_(1, 1)}')

#------------------------------------------------------------------------------
# NAND Gate
#------------------------------------------------------------------------------
def _nand_(x1, x2):

  w1 = -0.5
  w2 = -0.5
  b = 0.75

  u = (w1 * x1) + (w2 * x2) + b

  if u > 0:
    return 1
  else:
    return 0

print(f'AND(0, 0) : {_and_(0, 0)}')
print(f'AND(0, 1) : {_and_(0, 1)}')
print(f'AND(1, 0) : {_and_(1, 0)}')
print(f'AND(1, 1) : {_and_(1, 1)}')

#------------------------------------------------------------------------------
# XOR Gate
#------------------------------------------------------------------------------
def _xor_(x1, x2):
  return _and_(_nand_(x1, x2), _or_(x1, x2))

print(f'XOR(0, 0) : {_xor_(0, 0)}')
print(f'XOR(0, 1) : {_xor_(0, 1)}')
print(f'XOR(1, 0) : {_xor_(1, 0)}')
print(f'XOR(1, 1) : {_xor_(1, 1)}')
